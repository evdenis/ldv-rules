before: file("$this")
{

#include <verifier/rcv.h>

extern void ldv_check_rcu_unlock( void );
extern void ldv_check_rcu_dereference( void );

extern void ldv_check_rcu_bh_unlock( void );
extern void ldv_check_rcu_bh_dereference( void );

extern void ldv_check_rcu_sched_unlock( void );
extern void ldv_check_rcu_sched_dereference( void );

extern void ldv_check_srcu_unlock( void );
extern void ldv_check_srcu_dereference( void );

extern void ldv_rcu_inc( void );
extern void ldv_rcu_bh_inc( void );
extern void ldv_rcu_sched_inc( void );
extern void ldv_srcu_inc( void );

extern void ldv_rcu_dec( void );
extern void ldv_rcu_bh_dec( void );
extern void ldv_rcu_sched_dec( void );
extern void ldv_srcu_dec( void );

}


around: execution( static inline void rcu_read_lock( void ) )
{
   ldv_rcu_inc();
}

around: execution( static inline void rcu_read_unlock( void ) )
{
   ldv_rcu_dec();
   ldv_check_rcu_unlock();
}

around: define( rcu_dereference(p) )
{
   ({
      ldv_check_rcu_dereference();
      ldv_undef_ptr();
   })
}


/* rcu_bh */
around: execution( static inline void rcu_read_lock_bh( void ) )
{
   ldv_rcu_bh_inc();
}

around: execution( static inline void rcu_read_unlock_bh( void ) )
{
   ldv_rcu_bh_dec();
   ldv_check_rcu_bh_unlock();
}

around: define( rcu_dereference_bh(p) )
{
   ({
      ldv_check_rcu_bh_dereference();
      ldv_undef_ptr();
   })
}


/* rcu_sched */
around: execution( static inline void rcu_read_lock_sched( void ) )
{
   ldv_rcu_sched_inc();
}

around: execution( static inline void rcu_read_unlock_sched( void ) )
{
    ldv_rcu_sched_dec();
    ldv_check_rcu_sched_unlock();
}

around: define( rcu_dereference_sched(p) )
{
   ({
      ldv_check_rcu_sched_dereference();
      ldv_undef_ptr();
   })
}


/* srcu */
around: execution( static inline int srcu_read_lock( struct srcu_struct *sp ) )
{
   ldv_srcu_inc();
   return ldv_undef_int();
}

around: execution( static inline void srcu_read_unlock( struct srcu_struct *sp, int idx ) )
{
   ldv_srcu_dec();
   ldv_check_srcu_unlock();
}

around: define( srcu_dereference(p,sp) )
{
   ({
      ldv_check_srcu_dereference();
      ldv_undef_ptr();
   })
}

new: file(LDV_COMMON_MODEL)
{
#include <verifier/rcv.h>

/* LDV_COMMENT_MODEL_STATE Indicates the level of rcu_lock nesting.*/
int ldv_rcu_nested = 0;
/* LDV_COMMENT_MODEL_STATE Indicates the level of rcu_bh_lock nesting.*/
int ldv_rcu_bh_nested = 0;
/* LDV_COMMENT_MODEL_STATE Indicates the level of rcu_sched_lock nesting.*/
int ldv_rcu_sched_nested = 0;
/* LDV_COMMENT_MODEL_STATE Indicates the level of srcu_lock nesting.*/
int ldv_srcu_nested = 0;

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_inc') Entry in rcu_read_lock/unlock section.*/
void
ldv_rcu_inc( void )
{
   /* LDV_COMMENT_CHANGE_STATE Increments the level of rcu_lock nesting.*/
   ++ldv_rcu_nested;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_dec') Exit from rcu_read_lock/unlock section.*/
void
ldv_rcu_dec( void )
{
   /* LDV_COMMENT_CHANGE_STATE Decrements the level of rcu_lock nesting.*/
   --ldv_rcu_nested;
}


/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_bh_inc') Entry in rcu_read_lock_bh/unlock section.*/
void
ldv_rcu_bh_inc( void )
{
   /* LDV_COMMENT_CHANGE_STATE Increments the level of rcu_read_lock_bh nesting.*/
   ++ldv_rcu_bh_nested;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_bh_dec') Exit from rcu_read_lock_bh/unlock section.*/
void
ldv_rcu_bh_dec( void )
{
   /* LDV_COMMENT_CHANGE_STATE Decrements the level of rcu_read_lock_bh nesting.*/
   --ldv_rcu_bh_nested;
}


/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_sched_inc') Entry in rcu_read_lock_sched/unlock section.*/
void
ldv_rcu_sched_inc( void )
{
   /* LDV_COMMENT_CHANGE_STATE Increments the level of rcu_read_lock_sched nesting.*/
   ++ldv_rcu_sched_nested;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_sched_dec') Exit from rcu_read_lock_sched/unlock section.*/
void
ldv_rcu_sched_dec( void )
{
   /* LDV_COMMENT_CHANGE_STATE Decrements the level of rcu_read_lock_sched nesting.*/
   --ldv_rcu_sched_nested;
}


/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_srcu_inc') Entry in srcu_read_lock/unlock section.*/
void
ldv_srcu_inc( void )
{
   /* LDV_COMMENT_CHANGE_STATE Increments the level of srcu_read_lock nesting.*/
   ++ldv_srcu_nested;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_srcu_dec') Exit from srcu_read_lock/unlock section.*/
void
ldv_srcu_dec( void )
{
   /* LDV_COMMENT_CHANGE_STATE Decrements the level of srcu_read_lock nesting.*/
   --ldv_srcu_nested;
}


/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_final_state') Checks that for each lock there is unlock.*/
void
ldv_check_final_state( void )
{
   ldv_assert( ldv_rcu_nested == 0 );
   ldv_assert( ldv_rcu_bh_nested == 0 );
   ldv_assert( ldv_rcu_sched_nested == 0 );
   ldv_assert( ldv_srcu_nested == 0 );
}

/*The order of lock/unlock check is very simple and not reliable enough.
Actually, I don't think that it should be implemented in this rule.*/

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_rcu_unlock') Checks that unlock occurs after lock.*/
void
ldv_check_rcu_unlock( void )
{
   /* LDV_COMMENT_ASSERT checks the order of rcu_read{lock,unlock}.*/
   ldv_assert( ldv_rcu_nested >= 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_rcu_dereference') Checks for proper rcu_dereference.*/
void
ldv_check_rcu_dereference( void )
{
   /* LDV_COMMENT_ASSERT rcu_dereference should be used only within rcu_read_lock section.*/
   ldv_assert( ldv_rcu_nested > 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_rcu_bh_unlock') Checks that unlock occurs after lock.*/
void
ldv_check_rcu_bh_unlock( void )
{
   /* LDV_COMMENT_ASSERT checks the order of rcu_bh_read{lock,unlock}.*/
   ldv_assert( ldv_rcu_bh_nested >= 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_rcu_bh_dereference') Checks for proper rcu_bh_dereference.*/
void
ldv_check_rcu_bh_dereference( void )
{
   /* LDV_COMMENT_ASSERT rcu_bh_dereference should be used only within rcu_bh_read_lock section.*/
   ldv_assert( ldv_rcu_bh_nested > 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_rcu_sched_unlock') Checks that unlock occurs after lock.*/
void
ldv_check_rcu_sched_unlock( void )
{
   /* LDV_COMMENT_ASSERT checks the order of rcu_sched_read{lock,unlock}.*/
   ldv_assert( ldv_rcu_sched_nested >= 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_rcu_sched_dereference') Checks for proper rcu_sched_dereference.*/
void
ldv_check_rcu_sched_dereference( void )
{
   /* LDV_COMMENT_ASSERT rcu_sched_dereference should be used only within rcu_sched_read_lock section.*/
   ldv_assert( ldv_rcu_sched_nested > 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_srcu_unlock') Checks that unlock occurs after lock.*/
void
ldv_check_srcu_unlock( void )
{
   /* LDV_COMMENT_ASSERT checks the order of srcu_read{lock,unlock}.*/
   ldv_assert( ldv_srcu_nested >= 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_srcu_dereference') Checks for proper srcu_dereference.*/
void
ldv_check_srcu_dereference( void )
{
   /* LDV_COMMENT_ASSERT srcu_dereference should be used only within srcu_read_lock section.*/
   ldv_assert( ldv_srcu_nested > 0 );
}

}

