@include "../ldv.aspect"

before: file("$this")
{
#include <ldv.h>

extern int ldv_rcu_nested;
extern int ldv_rcu_dereference;

extern int ldv_rcu_bh_nested;
extern int ldv_rcu_bh_dereference;

extern int ldv_rcu_sched_nested;
extern int ldv_rcu_sched_dereference;

extern int ldv_srcu_read_lock_nested;
extern int ldv_srcu_dereference;


extern void ldv_check_rcu_unlock( void );
extern void ldv_check_rcu_dereference( void );

extern void ldv_check_rcu_bh_unlock( void );
extern void ldv_check_rcu_bh_dereference( void );

extern void ldv_check_rcu_sched_unlock( void );
extern void ldv_check_rcu_sched_dereference( void );

extern void ldv_check_srcu_unlock( void );
extern void ldv_check_srcu_dereference( void );
}


around: execution( static inline void rcu_read_lock( void ) )
{
   ++ldv_rcu_nested;
}

around: execution( static inline void rcu_read_unlock( void ) )
{
   --ldv_rcu_nested;
   if ( ldv_rcu_nested == 0 ) {
      ldv_check_rcu_unlock();
      ldv_rcu_dereference = 0;
   }
}

around: define( rcu_dereference(p) )
{
   ({
      ldv_rcu_dereference = 1;
      ldv_check_rcu_dereference();
      ldv_undef_ptr();
   })
}


/* rcu_bh */
around: execution( static inline void rcu_read_lock_bh( void ) )
{
   ++ldv_rcu_bh_nested;
}

around: execution( static inline void rcu_read_unlock_bh( void ) )
{
   --ldv_rcu_bh_nested;
   if ( ldv_rcu_bh_nested == 0 ) {
      ldv_check_rcu_bh_unlock();
      ldv_rcu_bh_dereference = 0;
   }
}

around: define( rcu_dereference_bh(p) )
{
   ({
      ldv_rcu_bh_dereference = 1;
      ldv_check_rcu_bh_dereference();
      ldv_undef_ptr();
   })
}


/* rcu_sched */
around: execution( static inline void rcu_read_lock_sched( void ) )
{
   ++ldv_rcu_sched_nested;
}

around: execution( static inline void rcu_read_unlock_sched( void ) )
{
   --ldv_rcu_sched_nested;
   if ( ldv_rcu_sched_nested == 0 ) {
      ldv_check_rcu_sched_unlock();
      ldv_rcu_sched_dereference = 0;
   }
}

around: define( rcu_dereference_sched(p) )
{
   ({
      ldv_rcu_sched_dereference = 1;
      ldv_check_rcu_sched_dereference();
      ldv_undef_ptr();
   })
}


/* srcu */
around: execution( static inline int srcu_read_lock( struct srcu_struct *sp ) )
{
   ++ldv_srcu_nested;
   return ldv_undef_int();
}

around: execution( static inline void srcu_read_unlock( struct srcu_struct *sp, int idx ) )
{
   --ldv_srcu_nested;
   if ( ldv_srcu_nested == 0 ) {
      ldv_check_srcu_unlock();
      ldv_srcu_dereference = 0;
   }

}

around: define( srcu_dereference(p,sp) )
{
   ({
      ldv_srcu_dereference = 1;
      ldv_check_srcu_dereference();
      ldv_undef_ptr();
   })
}

new: file(LDV_COMMON_MODEL)
{

int ldv_rcu_nested = 0;
int ldv_rcu_dereference = 0;

int ldv_rcu_bh_nested = 0;
int ldv_rcu_bh_dereference = 0;

int ldv_rcu_sched_nested = 0;
int ldv_rcu_sched_dereference = 0;

int ldv_srcu_read_lock_nested = 0;
int ldv_srcu_dereference = 0;

void
ldv_check_final_state( void )
{
   ldv_assert( ldv_rcu_nested == 0 );
   ldv_assert( ldv_rcu_bh_nested == 0 );
   ldv_assert( ldv_rcu_sched_nested == 0 );
   ldv_assert( ldv_srcu_nested == 0 );
}

void
ldv_check_rcu_unlock( void )
{
   ldv_assert( ldv_rcu_dereference == 1 );
   ldv_assert( ldv_rcu_nested == 0 );
}

void
ldv_check_rcu_dereference( void )
{
   ldv_assert( ldv_rcu_nested > 0 );
}

void
ldv_check_rcu_bh_unlock( void )
{
   ldv_assert( ldv_rcu_bh_dereference == 1 );
   ldv_assert( ldv_rcu_bh_nested == 0 );
}

void
ldv_check_rcu_bh_dereference( void )
{
   ldv_assert( ldv_rcu_bh_nested > 0 );
}

void
ldv_check_rcu_sched_unlock( void )
{
   ldv_assert( ldv_rcu_sched_dereference == 1 );
   ldv_assert( ldv_rcu_sched_nested == 0 );
}

void
ldv_check_rcu_sched_dereference( void )
{
   ldv_assert( ldv_rcu_sched_nested > 0 );
}

void
ldv_check_srcu_unlock( void )
{
   ldv_assert( ldv_srcu_dereference == 1 );
   ldv_assert( ldv_srcu_nested == 0 );
}

void
ldv_check_srcu_dereference( void )
{
   ldv_assert( ldv_srcu_nested > 0 );
}

}

