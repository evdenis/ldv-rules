before: file("$this")
{

/* workaround for Cil bug */
#define const

extern void ldv_rcu_read_lock_inc( void );
extern void ldv_rcu_read_lock_dec( void );

extern void ldv_check( void );
}


new: file(LDV_COMMON_MODEL)
{

#include <verifier/rcv.h>

/* LDV_COMMENT_MODEL_STATE Indicates the level of rcu locks nesting.*/
int ldv_rcu_read_lock_nested = 0;

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_read_lock_inc') Entry in rcu_read_lock/unlock section.*/
void
ldv_rcu_read_lock_inc( void )
{
   /* LDV_COMMENT_STATE_CHANGE Increments the level of rcu locks nesting.*/
   ++ldv_rcu_read_lock_nested;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_rcu_read_lock_dec') Exit from rcu_read_lock/unlock section.*/
void
ldv_rcu_read_lock_dec( void )
{
   /* LDV_COMMENT_STATE_CHANGE Decrements the level of rcu locks nesting.*/
   --ldv_rcu_read_lock_nested;
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check') Checks for not holding rcu lock.*/
void
ldv_check( void )
{
   /* LDV_COMMENT_ASSERT might_sleep functions should not be called under rcu locks.*/
   ldv_assert( ldv_rcu_read_lock_nested == 0 );
}

/* LDV_COMMENT_MODEL_FUNCTION_DEFINITION(name='ldv_check_final_state') Checks that for each lock there is unlock.*/
void
ldv_check_final_state( void )
{
   ldv_check();
}

}


around: execution( static inline void rcu_read_lock( void ) )
{
   ldv_rcu_read_lock_inc();
}

around: execution( static inline void rcu_read_unlock( void ) )
{
   ldv_rcu_read_lock_dec();
}

around: execution( static inline void rcu_read_lock_bh( void ) )
{
   ldv_rcu_read_lock_inc();
}

around: execution( static inline void rcu_read_unlock_bh( void ) )
{
   ldv_rcu_read_lock_dec();
}

around: execution( static inline void rcu_read_lock_sched( void ) )
{
   ldv_rcu_read_lock_inc();
}

around: execution( static inline void rcu_read_unlock_sched( void ) )
{
   ldv_rcu_read_lock_dec();
}

around: define( might_sleep() )
{
   ldv_check()
}

